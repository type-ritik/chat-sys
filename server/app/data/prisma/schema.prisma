// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(uuid())
  name                   String?
  email                  String         @unique
  username               String         @unique
  password               String
  isAdmin                Boolean        @default(false)
  isOnline               Boolean        @default(true)
  profile                Profile?
  createdAt              DateTime       @default(now())
  friendRequestsSent     Friendship[]   @relation("FriendRequestsSent")
  friendRequestsReceived Friendship[]   @relation("FriendRequestsReceived")
  ChatMsgSender          ChatMessage[]  @relation("ChatMsgSender")
  ChatMsgReceiver        ChatMessage[]  @relation("ChatMsgReceiver")
  ChatMsgUser            ChatMessages[] @relation("ChatMsgFromUser")
  MessageReceiver        Message[]      @relation("ReceiverMessage")
  MessageSender          Message[]      @relation("SenderMessage")
}

model Profile {
  id        String  @id @default(uuid())
  bio       String?
  avatarUrl String?
  isActive  Boolean @default(true)
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model Message {
  id          String   @id @default(uuid())
  content     String
  requestedId String
  isSeen      Boolean  @default(false)
  senderId    String
  receiverId  String
  receiver    User     @relation("ReceiverMessage", fields: [receiverId], references: [id])
  sender      User     @relation("SenderMessage", fields: [senderId], references: [id])
  timestamp   DateTime @default(now())
}

model Friendship {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation("FriendRequestsSent", fields: [userId], references: [id])
  friend    User       @relation("FriendRequestsReceived", fields: [friendId], references: [id])
  chatRoom  ChatRoom[] @relation("ChatRoomFriendship")
  friendId  String
  status    String // e.g., "pending", "accepted", "blocked"
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, friendId])
}

model ChatMessage {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  sender     User     @relation("ChatMsgSender", fields: [senderId], references: [id])
  receiver   User     @relation("ChatMsgReceiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

model ChatMessages {
  id         String   @id @default(uuid())
  chatRoomId String
  userId     String
  message    String
  createdAt  DateTime @default(now())
  user       User     @relation("ChatMsgFromUser", fields: [userId], references: [id])
  chatRoom   ChatRoom @relation("ChatRoomMessages", fields: [chatRoomId], references: [id])
}

model ChatRoom {
  id           String         @id @default(uuid())
  friendshp    Friendship     @relation("ChatRoomFriendship", fields: [friendShipId], references: [id])
  friendShipId String
  createdAt    DateTime       @default(now())
  ChatMessages ChatMessages[] @relation("ChatRoomMessages")

  @@unique([friendShipId])
}
