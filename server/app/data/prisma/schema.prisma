// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// üßë USER & PROFILE DOMAIN
// ========================

model User {
  id        String   @id @default(uuid())
  name      String?
  username  String   @unique
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  // 1:1 ‚Üí Profile
  profile Profile?

  // Friendships
  sentRequests     Friendship[] @relation("UserSentRequests")
  receivedRequests Friendship[] @relation("UserReceivedRequests")

  // // Chat Messages
  // sentChatMessages     ChatMessage[] @relation("UserSentChatMessages")
  // receivedChatMessages ChatMessage[] @relation("UserReceivedChatMessages")

  // Room Messages (Group or private chat messages)
  roomMessages ChatRoomMessage[] @relation("UserRoomMessages")

  // Private messages (notifications / DMs)
  sentMessages     Message[] @relation("UserSentMessages")
  receivedMessages Message[] @relation("UserReceivedMessages")

  // User Action Records (Monitoring user activity)
  AuditLog AuditLog[] @relation("UserActionRecord")
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  bio       String?
  avatarUrl String?
  isActive  Boolean @default(true)

  // Reference back to User
  user User @relation(fields: [userId], references: [id])
}

// ========================
// üì© DIRECT MESSAGE DOMAIN
// ========================

model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  content     String
  requestedId String?
  isSeen      Boolean  @default(false)
  timestamp   DateTime @default(now())

  sender   User @relation("UserSentMessages", fields: [senderId], references: [id])
  receiver User @relation("UserReceivedMessages", fields: [receiverId], references: [id])
}

// ========================
// ü§ù FRIENDSHIP DOMAIN
// ========================

model Friendship {
  id        String           @id @default(uuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user   User @relation("UserSentRequests", fields: [userId], references: [id])
  friend User @relation("UserReceivedRequests", fields: [friendId], references: [id])

  chatRoom ChatRoom? @relation("FriendshipChatRoom")

  @@unique([userId, friendId])
}

// ========================
// üßæ CHAT MESSAGE DOMAIN
// ========================

// model ChatMessage {
//   id         String   @id @default(uuid())
//   senderId   String
//   receiverId String
//   content    String
//   createdAt  DateTime @default(now())

//   sender   User @relation("UserSentChatMessages", fields: [senderId], references: [id])
//   receiver User @relation("UserReceivedChatMessages", fields: [receiverId], references: [id])

//   @@unique([senderId, receiverId])
// }

// ========================
// üí¨ CHAT DOMAIN
// ========================

model ChatRoom {
  id           String   @id @default(uuid())
  friendshipId String   @unique
  createdAt    DateTime @default(now())

  friendship Friendship        @relation("FriendshipChatRoom", fields: [friendshipId], references: [id])
  messages   ChatRoomMessage[] @relation("ChatRoomMessages")
}

model ChatRoomMessage {
  id         String   @id @default(uuid())
  chatRoomId String
  userId     String
  message    String
  createdAt  DateTime @default(now())

  chatRoom ChatRoom @relation("ChatRoomMessages", fields: [chatRoomId], references: [id])
  user     User     @relation("UserRoomMessages", fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String? // nullable: system actions may not have a user
  action    String // e.g., "LOGIN", "UPDATE_PROFILE", "SEND_MESSAGE"
  entity    String? // e.g., "User", "Friendship", "Message"
  entityId  String? // ID of affected entity
  details   String? // optional JSON or description
  ipAddress String? // track user IP (if applicable)
  userAgent String? // e.g., browser or device info
  createdAt DateTime @default(now())

  user User? @relation("UserActionRecord", fields: [userId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}
